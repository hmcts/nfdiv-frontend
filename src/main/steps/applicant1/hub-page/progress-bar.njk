{% from "components/hmcts-progress-bar/macro.njk" import hmctsProgressBar %}

{% macro textWithVisuallyHiddenSpan(text, isComplete) %}
  {{text}}<span class="govuk-visually-hidden">{{'' if isComplete else 'not '}}completed</span>
{% endmacro %}

{% if isJointApplication %}
  {% set items = [{
    label: {
      html: textWithVisuallyHiddenSpan(applicationSubmitted, true)
    },
    complete: true,
    active: false
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderApplication, currentState.isAfter('AwaitingLegalAdvisorReferral'))
    },
    complete: currentState.isAfter('AwaitingLegalAdvisorReferral'),
    active: hasApplicantConfirmedReceipt
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderGranted, currentState.isAtOrAfter('ConditionalOrderPronounced'))
    },
    complete: currentState.isAtOrAfter('ConditionalOrderPronounced'),
    active: userCase.state == 'AwaitingPronouncement'
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(finalOrderApplication, currentState.isAfter('FinalOrderRequested'))
    },
    complete: currentState.isAfter('FinalOrderRequested'),
    active: userCase.state == 'AwaitingFinalOrder'
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(applicationEnded, userCase.state == 'FinalOrderComplete')
    },
    complete: userCase.state == 'FinalOrderComplete',
    active: userCase.state == 'FinalOrderRequested'
  }] %}
{% else %}
  {% set items = [{
    label: {
      html: textWithVisuallyHiddenSpan(applicationSubmitted, true)
    },
    complete: true,
    active: false
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(response, currentState.isAfter('IssuedToBailiff'))
    },
    complete: currentState.isAfter('IssuedToBailiff'),
    active: currentState.isAtOrAfter('AwaitingAos') and currentState.isBefore('Holding')
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderApplication, currentState.isAfter('AwaitingGeneralConsideration'))
    },
    complete: currentState.isAfter('AwaitingGeneralConsideration'),
    active: userCase.state == 'AwaitingConditionalOrder' or hasApplicantConfirmedReceipt
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderGranted, currentState.isAfter('AwaitingPronouncement'))
    },
    complete: currentState.isAfter('AwaitingPronouncement'),
    active: userCase.state == 'ConditionalOrderDrafted'
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(finalOrderApplication, currentState.isAfter('FinalOrderPending'))
    },
    complete: currentState.isAfter('FinalOrderPending'),
    active:  currentState.isAtOrAfter('AwaitingFinalOrder') and currentState.isBefore('FinalOrderComplete')
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(applicationEnded, userCase.state == 'FinalOrderComplete')
    },
    complete: userCase.state == 'FinalOrderComplete'
  }] %}
{% endif %}

{{ hmctsProgressBar({
  classes: 'hub-progress-bar',
  items: items
}) }}
