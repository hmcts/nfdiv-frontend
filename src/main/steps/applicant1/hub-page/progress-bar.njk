{% from "components/hmcts-progress-bar/macro.njk" import hmctsProgressBar %}

{% macro textWithVisuallyHiddenSpan(text, isComplete) %}
  {{text}}<span class="govuk-visually-hidden">{{'' if isComplete else 'not '}}completed</span>
{% endmacro %}

{% if isJointApplication %}
  {% set items = [{
    label: {
      html: textWithVisuallyHiddenSpan(applicationSubmitted, true)
    },
    complete: true,
    active: false
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderApplication, displayState.isAfter('AwaitingLegalAdvisorReferral'))
    },
    complete: displayState.isAfter('AwaitingLegalAdvisorReferral'),
    active: hasApplicantConfirmedReceipt
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderGranted, displayState.isAtOrAfter('ConditionalOrderPronounced'))
    },
    complete: displayState.isAtOrAfter('ConditionalOrderPronounced'),
    active: displayState.state() == 'AwaitingPronouncement'
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(finalOrderApplication, displayState.isAfter('FinalOrderRequested'))
    },
    complete: displayState.isAfter('FinalOrderRequested'),
    active: displayState.state() == 'AwaitingFinalOrder'
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(applicationEnded, displayState.state() == 'FinalOrderComplete')
    },
    complete: displayState.state() == 'FinalOrderComplete',
    active: displayState.state() == 'FinalOrderRequested'
  }] %}
{% else %}
  {% set items = [{
    label: {
      html: textWithVisuallyHiddenSpan(applicationSubmitted, true)
    },
    complete: true,
    active: false
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(response, displayState.isAfter('IssuedToBailiff'))
    },
    complete: displayState.isAfter('IssuedToBailiff'),
    active: displayState.isAtOrAfter('AwaitingAos') and displayState.isBefore('Holding')
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderApplication, displayState.isAfter('AwaitingLegalAdvisorReferral'))
    },
    complete: displayState.isAfter('AwaitingLegalAdvisorReferral'),
    active: displayState.state() == 'AwaitingConditionalOrder' or hasApplicantConfirmedReceipt
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(conditionalOrderGranted, displayState.isAfter('AwaitingPronouncement'))
    },
    complete: displayState.isAfter('AwaitingPronouncement'),
    active: displayState.state() == 'ConditionalOrderDrafted'
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(finalOrderApplication, displayState.isAfter('FinalOrderPending'))
    },
    complete: displayState.isAfter('FinalOrderPending'),
    active:  displayState.isAtOrAfter('AwaitingFinalOrder') and displayState.isBefore('FinalOrderComplete')
  }, {
    label: {
      html: textWithVisuallyHiddenSpan(applicationEnded, displayState.state() == 'FinalOrderComplete')
    },
    complete: displayState.state() == 'FinalOrderComplete'
  }] %}
{% endif %}

{{ hmctsProgressBar({
  classes: 'hub-progress-bar',
  items: items
}) }}
